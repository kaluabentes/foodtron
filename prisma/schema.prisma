
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(userId)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  phone       String?
  role           String?   @default("user")
  selectedAddressId String?

  storeId        String?
  store          Store?    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  accounts Account[]
  sessions Session[]
  orders   Order[]
  addresses Address[]

  @@index(storeId)
  @@index(selectedAddressId)
}

model Address {
  id             String    @id @default(cuid())
  street String
  number String
  latitude Float?
  longitude Float?
  
  locationId String
  location StoreDeliveryLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@index(locationId)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id                String   @id @default(cuid())
  name              String?
  category          String?
  logo              String?
  cover             String?
  address           String?
  whatsapp          String?
  facebook          String?
  instagram         String?
  subdomain         String?  @unique
  customDomain      String?
  minimumOrderPrice Decimal?
  isOpen            Boolean? @default(false)

  users             User[]
  schedules         StoreSchedule[]
  deliveryLocations StoreDeliveryLocation[]
  paymentMethods    StorePaymentMethod[]
  products          Product[]
  categories        Category[]
  optionGroups      OptionGroup[]
  orders            Order[]
}

model StoreSchedule {
  id                 String  @id @default(cuid())
  weekDay            String
  start              String
  end                String
  isScheduledClosing Boolean
  isEnabled          Boolean
  storeId            String
  store              Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index(storeId)
}

model StoreDeliveryLocation {
  id            String  @id @default(cuid())
  neighborhood  String
  tax           Decimal
  estimatedTime String

  addresses Address[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index(storeId)
}

model StorePaymentMethod {
  id          String @id @default(cuid())
  description String
  type        String

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index(storeId)
}

model Product {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Decimal
  image       String

  storeId    String
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  productOptionGroups ProductOptionGroup[]

  @@index(storeId)
  @@index(categoryId)
}

model ProductOptionGroup {
  id String @id @default(cuid())

  productId     String?
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  optionGroupId String?
  optionGroup   OptionGroup? @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)

  @@index(optionGroupId)
  @@index(productId)
}

model OptionGroup {
  id        String  @id @default(cuid())
  title     String
  required  Boolean
  maxOption String
  maxOptionRequired Boolean @default(false)

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  options             Option[]
  productOptionGroups ProductOptionGroup[]

  @@index(storeId)
}

model Option {
  id    String  @id @default(cuid())
  title String
  price Decimal?

  optionGroupId String?
  optionGroup   OptionGroup? @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)

  @@index(optionGroupId)
}

model Category {
  id    String @id @default(cuid())
  title String

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products Product[]

  @@index(storeId)
}

model Order {
  id            String  @id @default(cuid())
  tax           Decimal
  paymentMethod String
  change        Decimal?
  address       String
  latitude      Float?
  longitude     Float?
  status        String
  username      String
  phone         String
  estimatedTime String?
  reasonForCancellation String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderProducts OrderProduct[]
  orderStatuses OrderStatus[]

  @@index(storeId)
  @@index(userId)
}

model OrderStatus {
  id            String  @id @default(cuid())
  status String
  createdAt DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index(orderId)
}

model OrderProduct {
  id       String  @id @default(cuid())
  title    String
  price    Decimal
  quantity String
  image    String
  observation String?

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  options OrderProductOption[]

  @@index(orderId)
}

model OrderProductOption {
  id       String  @id @default(cuid())
  title String
  quantity Int
  price Decimal?

  orderProductId String
  orderProduct   OrderProduct  @relation(fields: [orderProductId], references: [id], onDelete: Cascade)

  @@index(orderProductId)
}
